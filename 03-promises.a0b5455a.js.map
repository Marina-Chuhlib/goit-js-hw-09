{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CA5CGQ,SAASC,cAAc,SAiC/BC,iBAAiB,UA/BLC,IAClBA,EAAEC,iBAEF,MACEZ,MAAOa,EACPC,KAAMC,EACNC,OAAQC,GACNN,EAAEO,cAAcC,SAEpB,IAAIC,EAAQC,OAAOR,EAAWS,OAC9B,MAAMR,EAAOO,OAAON,EAAUO,OACxBN,EAASK,OAAOJ,EAAYK,QAE7BF,GAASN,GAAQE,GAAU,IAC9BpB,EAAA2B,OAAOC,QAAQ,+BACfb,EAAEO,cAAcO,SAGlB,IAAK,IAAIC,EAAW,EAAGA,GAAYV,EAAQU,GAAY,EACrD5B,EAAc4B,EAAUN,GACrBO,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOK,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEhE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOC,QAAQ,sBAAoBzB,QAAiBC,MAAU,IAGlEoB,GAASN,C,IAmBbhB,EAAc,EAAG,MACd6B,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjB8B,QAAQC,IAAI,uBAAqBhC,QAAiBC,MAAU,IAE7D6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClB8B,QAAQC,IAAI,sBAAoBhC,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nconst onCreateBtn = e => {\n  e.preventDefault();\n\n  const {\n    delay: delayValue,\n    step: stepValue,\n    amount: amountValue,\n  } = e.currentTarget.elements;\n\n  let delay = Number(delayValue.value);\n  const step = Number(stepValue.value);\n  const amount = Number(amountValue.value);\n\n  if ((delay || step || amount) < 0) {\n    Notify.failure('Please write positive value');\n    e.currentTarget.reset();\n  }\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n  }\n};\n\nformRef.addEventListener('submit', onCreateBtn);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayValue","step","stepValue","amount","amountValue","currentTarget","elements","delay1","Number","value","Notify","failure","reset","position1","then","success","catch","console","log"],"version":3,"file":"03-promises.a0b5455a.js.map"}